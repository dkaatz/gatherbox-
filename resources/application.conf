akka.cluster.jmx.multi-mbeans-in-same-jvm = "on"
lagom.broker.kafka {
  # The name of the Kafka service to look up out of the service locator.
  # If this is an empty string, then a service locator lookup will not be done,
  # and the brokers configuration will be used instead.
  service-name = "kafka_native"
  service-name = ${?KAFKA_SERVICE_NAME}

  # The URLs of the Kafka brokers. Separate each URL with a comma.
  # This will be ignored if the service-name configuration is non empty.
  brokers = ${lagom.broker.defaults.kafka.brokers}

  client {
    default {
      # Exponential backoff for failures
      failure-exponential-backoff {
        # minimum (initial) duration until processor is started again
        # after failure
        min = 3s

        # the exponential back-off is capped to this duration
        max = 30s

        # additional random delay is based on this factor
        random-factor = 0.2
      }
    }

    # configuration used by the Lagom Kafka producer
    producer = ${lagom.broker.kafka.client.default}
    producer.role = ""

    # configuration used by the Lagom Kafka consumer
    # Configuration parameters can be found at: https://kafka.apache.org/documentation.html#newconsumerconfigs
    consumer {
      failure-exponential-backoff = ${lagom.broker.kafka.client.default.failure-exponential-backoff}

      #The minimum amount of data the server should return for a fetch request.
      # If insufficient data is available the request will wait for that much data to accumulate before answering the request.
      fetch.min.bytes = 0

      #What to do when there is no initial offset in Kafka or if the current offset does not exist any more on the server
      # (e.g. because that data has been deleted):

      # earliest: automatically reset the offset to the earliest offset
      # latest: automatically reset the offset to the latest offset
      # none: throw exception to the consumer if no previous offset is found for the consumer's group
      # anything else: throw exception to the consumer.
      auto.offset.reset = "earliest"

      #The configuration controls the maximum amount of time the client will wait for the response of a request.
      # If the response is not received before the timeout elapses the client will resend the request if necessary
      # or fail the request if retries are exhausted.
      request.timeout.ms = 5000

      #The maximum delay between invocations of poll() when using consumer group management.
      # This places an upper bound on the amount of time that the consumer can be idle before fetching more records.
      # If poll() is not called before expiration of this timeout, then the consumer is considered failed and the group
      # will rebalance in order to reassign the partitions to another member.
      max.poll.interval.ms = 10000

      # The number of offsets that will be buffered to allow the consumer flow to
      # do its own buffering. This should be set to a number that is at least as
      # large as the maximum amount of buffering that the consumer flow will do,
      # if the consumer buffer buffers more than this, the offset buffer will
      # backpressure and cause the stream to stop.
      offset-buffer = 100

      # Number of messages batched together by the consumer before the related messages'
      # offsets are committed to Kafka.
      # By increasing the batching-size you are trading speed with the risk of having
      # to re-process a larger number of messages if a failure occurs.
      # The value provided must be strictly greater than zero.
      batching-size = 5

      # Interval of time waited by the consumer before the currently batched messages'
      # offsets are committed to Kafka.
      # This parameter is useful to ensure that messages' offsets are always committed
      # within a fixed amount of time.
      # The value provided must be strictly greater than zero.
      batching-interval = 5 seconds
    }
  }
}